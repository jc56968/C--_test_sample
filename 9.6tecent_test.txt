#include<iostream>
#include<vector>
#include<deque>
using namespace std;
int time = 0;
void cal(vector<int>& A, vector<int>& C,int a, int b, deque<int>& rm, deque<int>& bm)
{
	if (rm.empty() && bm.empty())
		return;
	int i = a;
	int j = b;
	int rb = rm.back();
	int rs = rm.front();
	int bb = bm.back();
	int bs = bm.front();
	while (A[i] != rs && A[i] != bs)
	{
		i++;
	}
	if (A[i] == rs &&C[i]==1)
	{
		for (int j = i; j >= a + 1; j--)
		{
			swap(A[j - 1], A[j]);
			swap(C[j - 1], C[j]);
			time++;
		}
		rm.pop_front();
	}
	else if (A[i] == bs && C[i] == 0)
	{
		for (int j = i; j >= a + 1; j--)
		{
			swap(A[j - 1], A[j]);
			swap(C[j - 1], C[j]);
			time++;
		}
		bm.pop_front();
	}

	while (A[j] != rb && A[j] != bb)
	{
		j--;
	}
	if (A[j] == rb && C[j] == 1)
	{
		for (int k = j; k<=b -1; k++)
		{
			swap(A[k + 1], A[k]);
			swap(C[k + 1], C[k]);
			time++;
		}
		rm.pop_back();
	}
	else if (A[j] == bb && C[j] == 0)
	{
		for (int k = j; k <= b - 1; k++)
		{
			swap(A[k + 1], A[k]);
			swap(C[k + 1], C[k]);
			time++;
		}
		bm.pop_back();
	}
	return cal(A, C, a + 1, b - 1, rm, bm);



}

int main()
{
	int n;
	cin >> n;
	deque<int> rm(n, 1);
	deque<int> bm(n, 1);
	for (int i = 0; i < n; i++)
		rm[i] = i+1;
	for (int i = 0; i < n; i++)
		bm[i] = i + 1;
	vector<int> A(2 * n, 0);
	vector<int> C(2 * n, 0);
	string s;
	cin >> s;
	for (int i = 0; i < 2 * n; i++)
	{

		if ('R' == s[i])
			C[i] = 1;
		else
			C[i] = 0;
	}
	for (int i = 0; i < 2 * n; i++)
	{
		int t;
		cin >> t;
		A[i] = t;
	}
	cal(A,C, 0, A.size() - 1,rm,bm);
	cout << time;

}